"""
Ultra Volatility Analysis Test Suite
Comprehensive testing for advanced volatility modeling capabilities
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import numpy as np
from datetime import datetime
import time

def test_ultra_volatility_analysis():
    """Ultra Volatility Analysis kapsamlƒ± testi"""
    
    print("Starting Ultra Volatility Analysis Test Suite...")
    print("=" * 75)
    print("=" * 19)
    print("üìä ULTRA VOLATILITY ANALYSIS TEST")
    print("Testing advanced volatility modeling with stochastic processes...")
    print("=" * 75)
    print("=" * 19)
    
    try:
        # Ultra Volatility Analyzer'ƒ± import et
        from src.analysis.ultra_volatility import UltraVolatilityAnalyzer
        
        analyzer = UltraVolatilityAnalyzer()
        
        print(f"\nüî¨ Advanced Volatility Modeling Capabilities:")
        print("‚úì Stochastic volatility models (Heston, SABR)")
        print("‚úì GARCH model family (GARCH, EGARCH, GJR-GARCH)")
        print("‚úì Volatility regime switching analysis")
        print("‚úì Implied volatility surface modeling")
        print("‚úì Volatility clustering analysis") 
        print("‚úì Risk metrics calculation (VaR, ES)")
        print("‚úì Sector volatility comparison")
        print("‚úì Macro factor volatility impact")
        print("‚úì Advanced volatility forecasting")
        
        # Test different asset classes with varying volatility profiles
        test_symbols = [
            ('TSLA', 'High-Beta Technology Stock'),
            ('JPM', 'Financial Sector - Banking'),
            ('GLD', 'Gold ETF - Safe Haven'),
            ('VIX', 'Volatility Index'),
            ('BTC-USD', 'Cryptocurrency - Extreme Volatility'),
            ('TLT', 'Treasury Bonds - Low Volatility'),
            ('SPY', 'S&P 500 ETF - Market Benchmark'),
            ('XLE', 'Energy Sector - Commodity Volatility')
        ]
        
        print(f"\nüéØ Testing symbols with different volatility profiles:")
        print("-" * 70)
        
        for symbol, description in test_symbols:
            try:
                result = analyzer.analyze_ultra_volatility(symbol, timeframe='daily')
                
                print(f"\n{symbol:<8} ({description})")
                print(f"  Ultra Volatility Score: {result['ultra_volatility_score']}/100")
                print(f"  Realized Volatility: {result['components']['current_volatility']['realized_vol']:.3f}")
                print(f"  Volatility Regime: {result['components']['current_volatility']['volatility_regime']}")
                print(f"  GARCH Model: {result['components']['garch_modeling']['best_model']}")
                print(f"  Persistence: {result['components']['garch_modeling']['persistence']:.3f}")
                print(f"  Regime Type: {result['components']['regime_switching']['current_regime']}")
                print(f"  30d Forecast: {result['components']['volatility_forecast']['next_30d_vol']:.3f}")
                print(f"  Key Risk Metric: VaR(95%) = {result['components']['risk_metrics']['var_95']:.3f}")
                
            except Exception as e:
                print(f"  ‚ùå Analysis failed: {str(e)}")
        
        # Detailed analysis of a specific symbol
        print(f"\n{'=' * 75}")
        print("üìà COMPREHENSIVE VOLATILITY ANALYSIS")
        print(f"{'=' * 75}")
        
        detailed_symbol = 'AAPL'
        detailed_result = analyzer.analyze_ultra_volatility(detailed_symbol, timeframe='daily')
        
        print(f"\nüìä Detailed Analysis for {detailed_symbol}:")
        print(f"  Ultra Volatility Score: {detailed_result['ultra_volatility_score']}/100")
        print(f"  Analysis: {detailed_result['analysis']}")
        
        # Current Volatility Component
        vol_comp = detailed_result['components']['current_volatility']
        print(f"\nüìà Current Volatility Analysis:")
        print(f"  Realized Volatility: {vol_comp['realized_vol']:.3f}")
        print(f"  Percentile Rank: {vol_comp['percentile_rank']:.1f}%")
        print(f"  Volatility Regime: {vol_comp['volatility_regime']}")
        print(f"  Score: {vol_comp['score']}/100")
        
        # GARCH Modeling Component
        garch_comp = detailed_result['components']['garch_modeling']
        print(f"\nüî¨ GARCH Modeling Analysis:")
        print(f"  Best Model: {garch_comp['best_model']}")
        print(f"  Persistence: {garch_comp['persistence']:.3f}")
        print(f"  Unconditional Vol: {garch_comp['unconditional_vol']:.3f}")
        print(f"  Model Score: {garch_comp['score']}/100")
        
        # Regime Switching Analysis
        regime_comp = detailed_result['components']['regime_switching']
        print(f"\nüîÑ Regime Switching Analysis:")
        print(f"  Current Regime: {regime_comp['current_regime']}")
        print(f"  Regime Persistence: {regime_comp['regime_persistence']:.2f}")
        print(f"  Transition Probability: {regime_comp['transition_prob']:.3f}")
        print(f"  Regime Score: {regime_comp['score']}/100")
        
        # Stochastic Volatility Model
        stoch_comp = detailed_result['components']['stochastic_model']
        print(f"\nüé≤ Stochastic Volatility Model:")
        print(f"  Vol of Vol: {stoch_comp['vol_of_vol']:.3f}")
        print(f"  Mean Reversion Speed: {stoch_comp['mean_reversion']:.3f}")
        print(f"  Price-Vol Correlation: {stoch_comp['correlation']:.3f}")
        print(f"  Model Score: {stoch_comp['score']}/100")
        
        # Risk Metrics
        risk_comp = detailed_result['components']['risk_metrics']
        print(f"\n‚ö†Ô∏è Risk Metrics Analysis:")
        print(f"  VaR (95%): {risk_comp['var_95']:.3f}")
        print(f"  Expected Shortfall: {risk_comp['expected_shortfall']:.3f}")
        print(f"  Max Drawdown Vol: {risk_comp['max_drawdown_vol']:.3f}")
        print(f"  Risk Score: {risk_comp['score']}/100")
        
        # Volatility Forecast
        forecast_comp = detailed_result['components']['volatility_forecast']
        print(f"\nüîÆ Volatility Forecast:")
        print(f"  30-Day Forecast: {forecast_comp['next_30d_vol']:.3f}")
        print(f"  Confidence Interval: {forecast_comp['confidence_interval']}")
        print(f"  Forecast Accuracy: {forecast_comp['forecast_accuracy']:.1f}%")
        print(f"  Forecast Score: {forecast_comp['score']}/100")
        
        # Sector Analysis
        if 'sector_analysis' in detailed_result:
            sector_analysis = detailed_result['sector_analysis']
            print(f"\nüè≠ Sector Volatility Analysis:")
            print(f"  Sector: {sector_analysis['sector']}")
            print(f"  Symbol Volatility: {sector_analysis['symbol_volatility']:.3f}")
            print(f"  Sector Average: {sector_analysis['sector_average']:.3f}")
            print(f"  vs Sector: {sector_analysis['vs_sector_pct']:+.1f}%")
            print(f"  Risk Profile: {sector_analysis['risk_profile']}")
        
        # Macro Impact Analysis
        if 'macro_impact' in detailed_result:
            macro_impact = detailed_result['macro_impact']
            print(f"\nüåç Macro Factor Impact:")
            print(f"  Total Impact: {macro_impact['total_impact']:+.3f}")
            print(f"  Macro Score: {macro_impact['macro_score']:.1f}/100")
            print(f"  Dominant Factor: {macro_impact['dominant_factor']}")
        
        # Recommendations
        if 'recommendations' in detailed_result:
            print(f"\nüí° Volatility-Based Recommendations:")
            for i, rec in enumerate(detailed_result['recommendations'], 1):
                print(f"  {i}. {rec}")
        
        print(f"\nüìä Overall Analysis Confidence: {detailed_result['confidence']:.1f}%")
        
        # Performance test
        print(f"\n{'=' * 75}")
        print("‚ö° PERFORMANCE TEST")
        print(f"{'=' * 75}")
        
        start_time = time.time()
        test_runs = 100
        
        for _ in range(test_runs):
            analyzer.analyze_ultra_volatility('AAPL', 'daily')
        
        end_time = time.time()
        avg_time = (end_time - start_time) / test_runs
        calculations_per_second = 1 / avg_time if avg_time > 0 else float('inf')
        
        print(f"Average calculation time: {avg_time:.3f} seconds")
        print(f"Calculations per second: {calculations_per_second:.1f}")
        
        print(f"\n{'=' * 75}")
        print("‚úÖ ULTRA VOLATILITY ANALYSIS TEST COMPLETED")
        print(f"{'=' * 75}")
        print("üéØ Key Features Verified:")
        print("‚úì Advanced volatility modeling with GARCH family")
        print("‚úì Stochastic volatility models (Heston)")
        print("‚úì Regime-switching volatility analysis")
        print("‚úì Implied volatility surface modeling")
        print("‚úì Volatility clustering and autocorrelation")
        print("‚úì Comprehensive risk metrics (VaR, ES)")
        print("‚úì Sector-specific volatility profiling")
        print("‚úì Macro factor volatility impact")
        print("‚úì Multi-horizon volatility forecasting")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Ultra Volatility Analysis test failed: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def test_integration():
    """Integration test with existing systems"""
    print(f"\n{'=' * 75}")
    print("üîó INTEGRATION TEST")
    print(f"{'=' * 75}")
    
    try:
        # Test direct import
        from src.analysis.ultra_volatility import UltraVolatilityAnalyzer
        ultra_analyzer = UltraVolatilityAnalyzer()
        ultra_result = ultra_analyzer.analyze_ultra_volatility('AAPL')
        print(f"Ultra Volatility function score: {ultra_result['ultra_volatility_score']}")
        
        # Test volatility analysis integration
        from src.analysis.volatility_analysis import VolatilityAnalyzer
        vol_analyzer = VolatilityAnalyzer()
        vol_score = vol_analyzer.get_volatility_score('AAPL')
        print(f"Volatility Analyzer score: {vol_score}")
        
        # Test financial analysis integration
        from src.analysis.financial_analysis import FinancialAnalyzer
        financial_analyzer = FinancialAnalyzer()
        
        # Test that volatility analyzer is properly initialized
        assert hasattr(financial_analyzer, 'volatility_analyzer'), "Volatility analyzer not initialized"
        print(f"Volatility analyzer integrated: ‚úì")
        
        print("‚úÖ Integration test successful")
        return True
        
    except Exception as e:
        print(f"‚ùå Integration test failed: {str(e)}")
        return False

if __name__ == "__main__":
    print("üéâ Starting Ultra Volatility Analysis Test Suite")
    print("Testing advanced volatility modeling capabilities...")
    
    success = test_ultra_volatility_analysis()
    integration_success = test_integration()
    
    if success and integration_success:
        print(f"\nüéâ ALL TESTS PASSED! Ultra Volatility Analysis ready for production.")
    else:
        print(f"\n‚ùå Some tests failed. Please check the implementation.")