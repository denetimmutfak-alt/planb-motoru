#!/usr/bin/env python3
"""
Complete Environment Setup for PlanB ULTRA Trading System
T√ºm eksik environment deƒüi≈ükenlerini otomatik olarak ayarlar
"""
import os
import pathlib
from datetime import datetime

def inject_env():
    """T√ºm eksik env deƒüi≈ükenlerini .env'ye yazar (varsa √ºst√ºne yazar)"""
    print(f"üîß Environment setup ba≈ülatƒ±lƒ±yor... {datetime.now()}")
    
    # Linux path for production, Windows path for development
    if os.name == 'nt':  # Windows
        env_path = pathlib.Path(".env")
    else:  # Linux (Hetzner)
        env_path = pathlib.Path("/home/planb-motoru/.env")
    
    env_path.touch(exist_ok=True)
    
    # T√ºm gerekli environment variables
    defaults = {
        # Financial Data APIs
        "FINNHUB_KEY": "c7srqkhr01qhfgqrpqd0c7srqkhr01qhfgqrpqdg",  # Finnhub API key
        "ALPHA_VANTAGE_KEY": "YOUR_ALPHA_VANTAGE_KEY",
        "POLYGON_KEY": "YOUR_POLYGON_KEY",
        
        # Social Media APIs
        "REDDIT_CLIENT_ID": "YOUR_REDDIT_CLIENT_ID", 
        "REDDIT_CLIENT_SECRET": "YOUR_REDDIT_CLIENT_SECRET",
        "REDDIT_USER_AGENT": "PlanBULTRA/1.0 by planb_trader",
        "REDDIT_USERNAME": "YOUR_REDDIT_USERNAME",
        "REDDIT_PASSWORD": "YOUR_REDDIT_PASSWORD",
        
        # News APIs
        "NEWS_API_KEY": "YOUR_NEWS_API_KEY",
        "NEWSDATA_API_KEY": "YOUR_NEWSDATA_KEY",
        
        # Twitter/X API
        "TWITTER_BEARER_TOKEN": "YOUR_TWITTER_BEARER_TOKEN",
        "TWITTER_API_KEY": "YOUR_TWITTER_API_KEY",
        "TWITTER_API_SECRET": "YOUR_TWITTER_API_SECRET",
        
        # Telegram Bot
        "TELEGRAM_BOT_TOKEN": "YOUR_TELEGRAM_BOT_TOKEN",
        "TELEGRAM_CHAT_ID": "YOUR_TELEGRAM_CHAT_ID",
        
        # Database & Cache
        "REDIS_URL": "redis://localhost:6379/0",
        "CACHE_TTL": "3600",
        "DATABASE_URL": "sqlite:///data/planb_motoru.db",
        
        # Performance & Logging
        "LOG_LEVEL": "INFO",
        "MAX_WORKERS": "4",
        "CHUNK_SIZE": "50",
        "REQUEST_TIMEOUT": "30",
        "SLEEP_BETWEEN_CYCLES": "3600",  # 60 dakika (1 saat)
        
        # Feature Flags
        "ENABLE_SENTIMENT": "true",
        "ENABLE_EARLY_WARNING": "true",
        "ENABLE_ULTRA_V3": "true",
        "ENABLE_MULTI_MARKET": "true",
        
        # Market Multipliers (Early Warning)
        "NASDAQ_MULTIPLIER": "3",
        "XETRA_MULTIPLIER": "2", 
        "EMTIA_MULTIPLIER": "2",
        "CRYPTO_MULTIPLIER": "10",
        
        # Risk Management
        "MAX_POSITION_SIZE": "0.1",
        "STOP_LOSS_PCT": "0.05",
        "TAKE_PROFIT_PCT": "0.15",
    }
    
    print(f"üìù Writing {len(defaults)} environment variables...")
    
    # Read existing env to avoid duplicates
    existing_keys = set()
    if env_path.exists():
        with env_path.open("r") as f:
            for line in f:
                if "=" in line and not line.strip().startswith("#"):
                    key = line.split("=")[0].strip()
                    existing_keys.add(key)
    
    # Write new variables
    new_count = 0
    with env_path.open("a") as f:
        f.write(f"\n# Generated by complete_env.py - {datetime.now()}\n")
        for k, v in defaults.items():
            if k not in existing_keys:
                f.write(f"{k}={v}\n")
                new_count += 1
                print(f"  ‚úÖ Added: {k}")
            else:
                print(f"  ‚ö†Ô∏è  Exists: {k}")
    
    print(f"üéØ Environment setup complete!")
    print(f"   üìä Total variables: {len(defaults)}")
    print(f"   ‚ú® New variables: {new_count}")
    print(f"   üìÅ File: {env_path}")
    
    return env_path, new_count

def load_env_vars():
    """Load environment variables from .env file"""
    try:
        # Try to import python-dotenv
        from dotenv import load_dotenv
        load_dotenv()
        print("‚úÖ Environment variables loaded via python-dotenv")
    except ImportError:
        print("‚ö†Ô∏è  python-dotenv not found, using manual loading...")
        # Manual env loading fallback
        env_path = pathlib.Path(".env")
        if env_path.exists():
            with env_path.open("r") as f:
                for line in f:
                    line = line.strip()
                    if "=" in line and not line.startswith("#"):
                        key, value = line.split("=", 1)
                        os.environ[key.strip()] = value.strip()
            print("‚úÖ Environment variables loaded manually")

def verify_setup():
    """Verify critical environment variables are set"""
    critical_vars = [
        "FINNHUB_KEY",
        "REDDIT_CLIENT_ID", 
        "TELEGRAM_BOT_TOKEN",
        "ENABLE_SENTIMENT",
        "ENABLE_ULTRA_V3"
    ]
    
    print("üîç Verifying critical environment variables...")
    missing = []
    for var in critical_vars:
        value = os.getenv(var)
        if value and value != f"YOUR_{var}":
            print(f"  ‚úÖ {var}: OK")
        else:
            print(f"  ‚ùå {var}: Missing or default")
            missing.append(var)
    
    if missing:
        print(f"‚ö†Ô∏è  Please update these variables in .env: {missing}")
        return False
    else:
        print("üéØ All critical variables verified!")
        return True

if __name__ == "__main__":
    print("üöÄ PlanB ULTRA Environment Setup üöÄ")
    print("=" * 40)
    
    # Setup environment
    env_path, new_count = inject_env()
    
    # Load variables
    load_env_vars()
    
    # Verify setup
    verify_setup()
    
    print("=" * 40)
    print("üéØ Setup complete! Next steps:")
    print("1. Edit .env file with your real API keys")
    print("2. Run: sudo systemctl restart planb-motoru")
    print("3. Check: sudo systemctl status planb-motoru")
    print("üöÄ Ready for production!")