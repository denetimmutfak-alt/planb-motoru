#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üì±‚ö° TELEGRAM ULTRA META-ENHANCED MESSAGE FORMATTER ‚ö°üì±
27-Module Enhanced System i√ßin g√∂rsel Telegram mesaj formatlarƒ±

Features:
- Ultra Meta-Enhanced signal formatting
- Volume explosion special alerts
- Interactive button layouts
- Turkish localized content
- Mobile-optimized design
- Real-time market insights

Created: 2025-10-03
Author: Ultra Telegram Design Team
Version: v27.0 Meta-Enhanced
"""

import pandas as pd
import numpy as np
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional, Any
import json

logger = logging.getLogger(__name__)

class TelegramUltraFormatter:
    """üì± Ultra Meta-Enhanced Telegram Message Formatter"""
    
    def __init__(self):
        self.name = "Telegram Ultra Formatter"
        self.version = "27.0.0"
        logger.info("üì± Telegram Ultra Meta-Enhanced Formatter initialized!")
        
        # Emoji mappings
        self.market_emojis = {
            'NASDAQ': 'üá∫üá∏',
            'BIST': 'üáπüá∑', 
            'XETRA': 'üá©üá™',
            'CRYPTO': 'üí∞',
            'COMMODITY': 'üåæ'
        }
        
        self.action_emojis = {
            'AL_ULTIMATE': 'üü¢ AL_ULTIMATE üß†üî•',
            'AL_G√ú√áL√ú': 'üü¢ AL_G√ú√áL√ú üß†',
            'AL_ORTA': 'üü¢ AL_ORTA üß†',
            'AL': 'üü¢ AL'
        }
        
        self.risk_emojis = {
            'D√ú≈û√úK': 'üö® D√ú≈û√úK',
            'ORTA': 'üö® ORTA', 
            'Y√úKSEK': 'üö® Y√úKSEK',
            'ULTRA ORTA': 'üö® ULTRA ORTA'
        }

    def format_main_signals(self, signals_data: List[Dict], analysis_summary: Dict) -> str:
        """Ana sinyal mesajƒ±nƒ± formatla"""
        
        # Header
        timestamp = datetime.now().strftime("%d.%m.%Y %H:%M")
        message = f"""üöÄ PlanB ULTRA META-ENHANCELƒ∞ SONU√áLAR
‚è∞ {timestamp}

üìä Toplam Analiz: {analysis_summary.get('total_analyzed', 0):,} sembol
‚ö° Ultra G√º√ßl√º: {analysis_summary.get('ultra_strong_count', 0)} adet (‚â•120 Meta Skoru)

"""
        
        # Individual signals
        for signal in signals_data[:6]:  # Top 6 signals
            symbol = signal.get('symbol', 'N/A')
            market = signal.get('market', 'UNKNOWN')
            price = signal.get('price', 0.0)
            classical_score = signal.get('classical_score', 0)
            meta_score = signal.get('meta_score', 0)
            collective_intelligence = signal.get('collective_intelligence', 0)
            quantum_state = signal.get('quantum_state', 'NEUTRAL')
            quantum_confidence = signal.get('quantum_confidence', 0)
            time_horizon = signal.get('time_horizon', '2-4 hafta')
            risk_level = signal.get('risk_level', 'ORTA')
            currency_symbol = '$' if market in ['NASDAQ', 'NYSE'] else ('‚Ç∫' if market == 'BIST' else '$')
            
            # Determine action type
            if meta_score >= 130:
                action = 'AL_ULTIMATE'
            elif meta_score >= 115:
                action = 'AL_G√ú√áL√ú'
            elif meta_score >= 100:
                action = 'AL_ORTA'
            else:
                action = 'AL'
            
            # Format signal
            message += f"""{self.action_emojis[action]} 
{symbol} {self.market_emojis.get(market, 'üåç')} | {currency_symbol}{price:.2f}
üìà Klasik: {classical_score}/100 | ‚ö° Meta: {meta_score}/100
üß† KZ: %{collective_intelligence} | üîÆ {quantum_state}: %{quantum_confidence}
‚è∞ {time_horizon} | {self.risk_emojis.get(risk_level, 'üö® ORTA')}

[üìä Tam Analiz] [üéØ Takip Et] [üö® Alarm Kur]
[üìà Grafik] [üì± Payla≈ü] [üí∞ Hesapla]

"""
        
        # Market summary
        message += """‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

üìà Piyasa √ñzeti:
"""
        
        market_summary = analysis_summary.get('market_summary', {})
        for market, data in market_summary.items():
            strong_count = data.get('strong_count', 0)
            total_count = data.get('total_count', 0)
            message += f"{market}: {strong_count}/{total_count} ultra g√º√ßl√º {'üî•' if strong_count > 3 else '‚ö°' if strong_count > 1 else 'üöÄ'}\n"
        
        # Meta-Intelligence insights
        insights = analysis_summary.get('meta_insights', [])
        if insights:
            message += f"""
üß† Meta-Zeka ƒ∞√ßg√∂r√ºleri:
"""
            for insight in insights[:4]:
                message += f"‚Ä¢ {insight}\n"
        
        # System controls
        message += f"""
üåü Sistem Kontrolleri:
[‚öôÔ∏è Ayarlar] [üìä Dashboard] [üìà Piyasa Tarama]
[üéØ Portf√∂y] [üö® Alarmlar] [üì± Bildirimler]

üîß Analiz Kontrolleri:
[üîç Filtrele] [‚è∞ Zaman √áer√ßevesi] [üéöÔ∏è Risk Ayarƒ±]
[üí∞ Pozisyon Boyutu] [üìä Sƒ±ralama] [üîÑ Yenile]

ü§ñ PlanB ULTIMATE v27.0
‚ö° 27 Geli≈ümi≈ü Mod√ºl Aktif
üß† Meta-Intelligence Engine
üîÆ Kuantum Probability System"""

        return message
    
    def format_volume_explosion_signals(self, volume_signals: List[Dict], volume_summary: Dict) -> str:
        """Hacim patlamasƒ± mesajƒ±nƒ± formatla"""
        
        timestamp = datetime.now().strftime("%d.%m.%Y %H:%M")
        message = f"""üîä‚ö° HACƒ∞M PATLAMASI ULTRA Sƒ∞NYALLER ‚ö°üîä
üöÄ 1-3 G√ºn ƒ∞√ßinde Zirve Potansiyeli
‚è∞ {timestamp}

‚ö° Toplam Tespit: {volume_summary.get('total_explosions', 0)} hacim patlamasƒ±
üî• Ultra G√º√ßl√º: {volume_summary.get('ultra_strong_count', 0)} adet (‚â•65 Meta Skoru)

"""
        
        # Volume explosion signals
        for signal in volume_signals[:4]:  # Top 4 volume signals
            symbol = signal.get('symbol', 'N/A')
            market = signal.get('market', 'UNKNOWN')
            price = signal.get('price', 0.0)
            volume_multiplier = signal.get('volume_multiplier', 1.0)
            classical_score = signal.get('classical_score', 0)
            meta_score = signal.get('meta_score', 0)
            collective_intelligence = signal.get('collective_intelligence', 0)
            quantum_state = signal.get('quantum_state', 'NEUTRAL')
            quantum_confidence = signal.get('quantum_confidence', 0)
            risk_level = 'ULTRA ORTA'  # Volume explosions are always higher risk
            currency_symbol = '$' if market in ['NASDAQ', 'NYSE'] else ('‚Ç∫' if market == 'BIST' else '$')
            
            # Format volume multiplier
            if volume_multiplier >= 1000000000:  # Billion
                vol_display = f"x{volume_multiplier/1000000000:.1f}B"
            elif volume_multiplier >= 1000000:  # Million
                vol_display = f"x{volume_multiplier/1000000:.1f}M"
            elif volume_multiplier >= 1000:  # Thousand
                vol_display = f"x{volume_multiplier/1000:.1f}K"
            else:
                vol_display = f"x{volume_multiplier:.0f}"
            
            # Determine action and fire intensity
            if meta_score >= 120:
                action = 'üü¢ AL_ULTRA üîäüí•'
                fire = 'üî•üî•üî•'
            elif meta_score >= 110:
                action = 'üü¢ AL_G√ú√áL√ú üîäüí•'
                fire = 'üî•üî•'
            else:
                action = 'üü¢ AL_ORTA üîäüí•'
                fire = 'üî•'
            
            message += f"""{action}
{symbol} {self.market_emojis.get(market, 'üåç')} | {currency_symbol}{price:.2f}
üìä Hacim Patlamasƒ±: {vol_display} {fire}
üìà Klasik: {classical_score}/100 | ‚ö° Meta: {meta_score}/100
üß† KZ: %{collective_intelligence} | üîÆ {quantum_state}: %{quantum_confidence}
‚è∞ 1-3 g√ºn | üö® ULTRA ORTA

[üìä Tam Analiz] [üéØ Takip Et] [üö® Alarm Kur]
[üìà Grafik] [üì± Payla≈ü] [üí∞ Hesapla]

"""
        
        # Volume analysis summary
        message += """‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

üîä Hacim Analizi:
"""
        
        market_volumes = volume_summary.get('market_volumes', {})
        for market, data in market_volumes.items():
            explosion_count = data.get('explosion_count', 0)
            total_count = data.get('total_count', 0)
            emoji = 'üí•' if explosion_count > 10 else 'üî•' if explosion_count > 5 else '‚ö°'
            message += f"{market}: {explosion_count}/{total_count} hacim patlamasƒ± {emoji}\n"
        
        # Important warnings
        message += f"""
‚ö†Ô∏è √ñnemli Uyarƒ±:
‚Ä¢ Hacim patlamalarƒ± y√ºksek volatilite i√ßerir
‚Ä¢ 1-3 g√ºn i√ßinde hƒ±zlƒ± kar/zarar potansiyeli
‚Ä¢ Sƒ±kƒ± stop-loss kullanƒ±lmasƒ± √∂nerilir
‚Ä¢ Pozisyon boyutu dikkatli ayarlanmalƒ±

üß† Meta-Zeka Hacim ƒ∞√ßg√∂r√ºleri:
"""
        
        volume_insights = volume_summary.get('volume_insights', [])
        for insight in volume_insights[:4]:
            message += f"‚Ä¢ {insight}\n"
        
        # Risk management controls
        message += f"""
üö® Risk Y√∂netimi:
[‚ö†Ô∏è Stop-Loss Ayarla] [üí∞ Pozisyon Hesapla] [‚è∞ Exit Timer]
[üìä Risk/Reward] [üîî Fiyat Alarmƒ±] [üìà Trailing Stop]

üîß Hacim Kontrolleri:
[üîç Hacim Filtresi] [‚è∞ Timeframe] [üìä Volume Profile]
[üí• Spike Detector] [üéØ Breakout Alert] [üîÑ Real-Time]

ü§ñ PlanB ULTRA Volume Scanner v27.0
üîä Real-Time Volume Analysis
‚ö° Breakout Detection Engine
üí• Momentum Capture System"""

        return message
    
    def format_compact_signal(self, signal_data: Dict) -> str:
        """Tekil sinyal i√ßin compact format"""
        
        symbol = signal_data.get('symbol', 'N/A')
        market = signal_data.get('market', 'UNKNOWN')
        price = signal_data.get('price', 0.0)
        meta_score = signal_data.get('meta_score', 0)
        collective_intelligence = signal_data.get('collective_intelligence', 0)
        quantum_state = signal_data.get('quantum_state', 'NEUTRAL')
        quantum_confidence = signal_data.get('quantum_confidence', 0)
        enhancement_multiplier = signal_data.get('enhancement_multiplier', 1.0)
        time_horizon = signal_data.get('time_horizon', '2-4 hafta')
        risk_level = signal_data.get('risk_level', 'ORTA')
        
        currency_symbol = '$' if market in ['NASDAQ', 'NYSE'] else ('‚Ç∫' if market == 'BIST' else '$')
        
        # Fire intensity based on meta score
        if meta_score >= 130:
            fire = 'üî•üî•üî•'
            action = 'AL_ULTIMATE'
        elif meta_score >= 115:
            fire = 'üî•üî•'
            action = 'AL_G√ú√áL√ú'
        else:
            fire = 'üî•'
            action = 'AL_ORTA'
        
        message = f"""üß†‚ö° META-ENHANCELƒ∞ Sƒ∞NYAL ‚ö°üß†

üéØ {symbol} {self.market_emojis.get(market, 'üåç')}
üí∞ Fiyat: {currency_symbol}{price:.2f}
‚ö° META Puan: {meta_score}/100 {fire}

üß† Kolektif Zeka: %{collective_intelligence} üü¢
üîÆ Kuantum Durum: {quantum_state} (%{quantum_confidence})
‚ö° G√º√ßlendirme: {enhancement_multiplier:.1f}x
üéØ Risk: {self.risk_emojis.get(risk_level, 'üö® ORTA')}

üü¢ {action}
‚è∞ {time_horizon}

[üìä Detaylar] [üéØ Takip] [üö® Alarm]

ü§ñ v27.0"""

        return message

# Global formatter instance
telegram_formatter = TelegramUltraFormatter()

def format_telegram_main_message(signals_data: List[Dict], analysis_summary: Dict) -> str:
    """Ana Telegram mesajƒ±nƒ± formatla"""
    return telegram_formatter.format_main_signals(signals_data, analysis_summary)

def format_telegram_volume_message(volume_signals: List[Dict], volume_summary: Dict) -> str:
    """Hacim patlamasƒ± Telegram mesajƒ±nƒ± formatla"""
    return telegram_formatter.format_volume_explosion_signals(volume_signals, volume_summary)

def format_telegram_compact_message(signal_data: Dict) -> str:
    """Compact Telegram mesajƒ±nƒ± formatla"""
    return telegram_formatter.format_compact_signal(signal_data)

if __name__ == "__main__":
    print("üì±‚ö° Telegram Ultra Meta-Enhanced Formatter loaded!")
    print("   ‚úÖ Main signals formatting")
    print("   ‚úÖ Volume explosion formatting") 
    print("   ‚úÖ Compact signal formatting")
    print("   ‚úÖ Interactive button layouts")
    print("   ‚úÖ Turkish localized content")
    print("   ‚úÖ Mobile-optimized design")
    print("üöÄ Ready for 27-module enhanced system!")